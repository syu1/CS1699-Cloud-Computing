import com.google.gson.Gson
import org.apache.spark.streaming.twitter.TwitterUtils
import org.apache.spark._
import org.apache.spark.streaming._
import org.apache.spark.streaming.twitter._
import org.apache.spark.storage.StorageLevel
import scala.io.Source
import scala.collection.mutable.HashMap
import java.io.File
import org.apache.log4j.Logger
import org.apache.log4j.Level
import sys.process.stringSeqToProcess
import org.joda.time.DateTime


  /** Configures the Oauth Credentials for accessing Twitter */
  def configureTwitterCredentials(apiKey: String, apiSecret: String, accessToken: String, accessTokenSecret: String) {
  	val configs = new HashMap[String, String] ++= Seq(
    	  "apiKey" -> apiKey, "apiSecret" -> apiSecret, "accessToken" -> accessToken, "accessTokenSecret" -> accessTokenSecret)
  	println("Configuring Twitter OAuth")
  	configs.foreach{ case(key, value) =>
    	  if (value.trim.isEmpty) {
      	    throw new Exception("Error setting authentication - value for " + key + " not set")
     	  }  		
    	  val fullKey = "twitter4j.oauth." + key.replace("api", "consumer")
    	  System.setProperty(fullKey, value.trim)
    	  println("\tProperty " + fullKey + " set as [" + value.trim + "]")
  	}
  	println()
  }	

  Logger.getLogger("org").setLevel(Level.ERROR)

  // Configure Twitter credentials
  val apiKey = "GYoZRTKAtkR7lDKf1VQdmyG3N"
  val apiSecret = "QN4vgV0E4jz4vDNDw39IzBd4jb9kr47DKlOE7Ynd3ZVzoEzFnL"
  val accessToken = "3297859041-0Ng2mmvSlZ40LxyDTjXhRDaaps1qHBEpDUaDI0t"
  val accessTokenSecret = "cHxgXwn0uB8qRrEeLh9o2cSPNZOcL5HK2csr5U4sZ4FBN"
  configureTwitterCredentials(apiKey, apiSecret, accessToken, accessTokenSecret)

  val ssc = new StreamingContext(sc, Seconds(60))
  val stream = TwitterUtils.createStream(ssc, None)

  val hashTags = stream.flatMap(status => status.getText.split(" ").filter(_.startsWith("#")))

  val topCounts120 = hashTags.map((_, 1)).reduceByKeyAndWindow(_ + _, Seconds(120)).map{case (topic, count) => (count, topic)}.transform(_.sortByKey(false))

  // Print popular hashtags
  topCounts120.foreachRDD(rdd => {
  	  val topList = rdd.take(10)
  	  println("\nPopular topics in last 120 seconds (%s total):".format(rdd.count()))
  	  topList.foreach{case (count, tag) => println("%s (%s tweets)".format(tag, count))}
	})

  ssc.start()
  ssc.awaitTermination()

